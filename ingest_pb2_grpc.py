# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ingest_pb2 as ingest__pb2


class IngestStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/Ingest/Publish',
                request_serializer=ingest__pb2.PublishRequest.SerializeToString,
                response_deserializer=ingest__pb2.PublishReply.FromString,
                )
        self.PublishBulk = channel.unary_unary(
                '/Ingest/PublishBulk',
                request_serializer=ingest__pb2.PublishBulkRequest.SerializeToString,
                response_deserializer=ingest__pb2.PublishBulkResponse.FromString,
                )


class IngestServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishBulk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IngestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ingest__pb2.PublishRequest.FromString,
                    response_serializer=ingest__pb2.PublishReply.SerializeToString,
            ),
            'PublishBulk': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishBulk,
                    request_deserializer=ingest__pb2.PublishBulkRequest.FromString,
                    response_serializer=ingest__pb2.PublishBulkResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Ingest', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Ingest(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ingest/Publish',
            ingest__pb2.PublishRequest.SerializeToString,
            ingest__pb2.PublishReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishBulk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Ingest/PublishBulk',
            ingest__pb2.PublishBulkRequest.SerializeToString,
            ingest__pb2.PublishBulkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
